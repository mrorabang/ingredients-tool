{"ast":null,"code":"import _objectSpread from\"D:/Ingredients Tool/tool/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import mockAPIService from'./mockAPIService';// Service để quản lý dữ liệu - Đọc/ghi từ file JSON và MockAPI\nclass DataService{constructor(){// Dữ liệu sẽ được load từ file JSON và MockAPI\nthis.menuItems=[];this.ingredients=[];this.recipes={};this.sales={};this.useMockAPI=true;// Flag để bật/tắt MockAPI\nthis.isInitialized=false;// Flag để kiểm tra đã khởi tạo chưa\n}// Lấy danh sách món\ngetMenuItems(){return this.menuItems;}// Lấy danh sách nguyên liệu\ngetIngredients(){return this.ingredients;}// Lấy công thức cho món\ngetRecipe(itemId){return this.recipes[itemId]||{};}// Lấy tất cả công thức\ngetAllRecipes(){return this.recipes;}// Cập nhật công thức\nasync updateRecipe(itemId,recipe){this.recipes[itemId]=recipe;if(this.useMockAPI){try{const menuItem=this.menuItems.find(item=>item.id===itemId);const mockAPIRecipe=mockAPIService.convertToMockAPIFormat(itemId,recipe,menuItem,this.ingredients);// Kiểm tra xem recipe đã tồn tại trong MockAPI chưa\ntry{await mockAPIService.getRecipeById(itemId);// Recipe đã tồn tại, cập nhật\nawait mockAPIService.updateRecipe(itemId,mockAPIRecipe);}catch(error){// Recipe chưa tồn tại, tạo mới\nawait mockAPIService.createRecipe(mockAPIRecipe);}console.log('Đã cập nhật recipe trong MockAPI');}catch(error){console.error('Lỗi khi cập nhật recipe trong MockAPI:',error);// Fallback to local storage\nawait this.saveRecipesToAPI();}}else{await this.saveRecipesToAPI();}}// Thêm món mới\nasync addMenuItem(item){const newId=Math.max(...this.menuItems.map(i=>i.id),0)+1;const newItem=_objectSpread(_objectSpread({},item),{},{id:newId});this.menuItems.push(newItem);await this.saveMenuItemsToAPI();return newItem;}// Cập nhật món\nasync updateMenuItem(itemId,updates){const index=this.menuItems.findIndex(item=>item.id===itemId);if(index!==-1){this.menuItems[index]=_objectSpread(_objectSpread({},this.menuItems[index]),updates);await this.saveMenuItemsToAPI();}}// Xóa món\nasync deleteMenuItem(itemId){this.menuItems=this.menuItems.filter(item=>item.id!==itemId);delete this.recipes[itemId];await this.saveMenuItemsToAPI();await this.saveRecipesToAPI();}// Thêm nguyên liệu mới\nasync addIngredient(ingredient){if(this.useMockAPI){try{const newIngredient=await mockAPIService.createIngredient(ingredient);this.ingredients.push(newIngredient);console.log('Đã tạo ingredient mới trong MockAPI');return newIngredient;}catch(error){console.error('Lỗi khi tạo ingredient trong MockAPI:',error);// Fallback to local\nconst newId=Math.max(...this.ingredients.map(i=>i.id),0)+1;const newIngredient=_objectSpread(_objectSpread({},ingredient),{},{id:newId});this.ingredients.push(newIngredient);await this.saveIngredientsToAPI();return newIngredient;}}else{const newId=Math.max(...this.ingredients.map(i=>i.id),0)+1;const newIngredient=_objectSpread(_objectSpread({},ingredient),{},{id:newId});this.ingredients.push(newIngredient);await this.saveIngredientsToAPI();return newIngredient;}}// Cập nhật nguyên liệu\nasync updateIngredient(ingredientId,updates){const index=this.ingredients.findIndex(ing=>ing.id===ingredientId);if(index!==-1){this.ingredients[index]=_objectSpread(_objectSpread({},this.ingredients[index]),updates);if(this.useMockAPI){try{await mockAPIService.updateIngredient(ingredientId,this.ingredients[index]);console.log('Đã cập nhật ingredient trong MockAPI');}catch(error){console.error('Lỗi khi cập nhật ingredient trong MockAPI:',error);await this.saveIngredientsToAPI();}}else{await this.saveIngredientsToAPI();}}}// Xóa nguyên liệu\nasync deleteIngredient(ingredientId){console.log('Attempting to delete ingredient with ID:',ingredientId);console.log('Current ingredients before delete:',this.ingredients.length);// Tìm ingredient trước khi xóa để debug\nconst ingredientToDelete=this.ingredients.find(ing=>ing.id===ingredientId);if(ingredientToDelete){console.log('Found ingredient to delete:',ingredientToDelete);}else{console.log('Ingredient not found in local data, ID:',ingredientId);}// Xóa nguyên liệu khỏi local data\nthis.ingredients=this.ingredients.filter(ing=>ing.id!==ingredientId);console.log('Ingredients after local delete:',this.ingredients.length);// Xóa nguyên liệu khỏi tất cả công thức\nconst updatedRecipes={};Object.keys(this.recipes).forEach(itemId=>{const recipe=_objectSpread({},this.recipes[itemId]);delete recipe[ingredientId];updatedRecipes[itemId]=recipe;});this.recipes=updatedRecipes;if(this.useMockAPI){try{// Xóa ingredient trong MockAPI\nconsole.log('Deleting ingredient from MockAPI with ID:',ingredientId);await mockAPIService.deleteIngredient(ingredientId);console.log('Đã xóa ingredient trong MockAPI');// Cập nhật tất cả recipes trong MockAPI\nconst updatePromises=Object.keys(this.recipes).map(itemId=>this.updateRecipe(itemId,this.recipes[itemId]));await Promise.all(updatePromises);console.log('Đã cập nhật tất cả recipes sau khi xóa ingredient');}catch(error){console.error('Lỗi khi xóa ingredient trong MockAPI:',error);// Nếu là lỗi 404 (ingredient không tồn tại trong MockAPI), chỉ cần sync local data\nif(error.message.includes('404')){console.log('Ingredient không tồn tại trong MockAPI, chỉ cần sync local data');await this.saveIngredientsToAPI();await this.saveRecipesToAPI();}else{// Lỗi khác, fallback to local storage\nawait this.saveIngredientsToAPI();await this.saveRecipesToAPI();}}}else{await this.saveIngredientsToAPI();await this.saveRecipesToAPI();}}// Thêm recipe mới (tương thích với MockAPI)\nasync addRecipe(itemId,recipe){this.recipes[itemId]=recipe;if(this.useMockAPI){try{const menuItem=this.menuItems.find(item=>item.id===itemId);const mockAPIRecipe=mockAPIService.convertToMockAPIFormat(itemId,recipe,menuItem,this.ingredients);await mockAPIService.createRecipe(mockAPIRecipe);console.log('Đã tạo recipe mới trong MockAPI');}catch(error){console.error('Lỗi khi tạo recipe trong MockAPI:',error);await this.saveRecipesToAPI();}}else{await this.saveRecipesToAPI();}}// Xóa recipe (tương thích với MockAPI)\nasync deleteRecipe(itemId){delete this.recipes[itemId];if(this.useMockAPI){try{await mockAPIService.deleteRecipe(itemId);console.log('Đã xóa recipe trong MockAPI');}catch(error){console.error('Lỗi khi xóa recipe trong MockAPI:',error);await this.saveRecipesToAPI();}}else{await this.saveRecipesToAPI();}}// Toggle MockAPI mode\ntoggleMockAPIMode(){this.useMockAPI=!this.useMockAPI;console.log('MockAPI mode:',this.useMockAPI?'ON':'OFF');return this.useMockAPI;}// Lấy trạng thái MockAPI\nisMockAPIEnabled(){return this.useMockAPI;}// Sync dữ liệu từ local lên MockAPI\nasync syncToMockAPI(){if(!this.useMockAPI){console.log('MockAPI không được bật, không thể sync');return;}try{console.log('Bắt đầu sync dữ liệu lên MockAPI...');// Sync ingredients\nfor(const ingredient of this.ingredients){try{await mockAPIService.createIngredient(ingredient);console.log('Đã sync ingredient:',ingredient.name);}catch(error){if(error.message.includes('409')){// Ingredient đã tồn tại, bỏ qua\nconsole.log('Ingredient đã tồn tại:',ingredient.name);}else{console.error('Lỗi khi sync ingredient:',ingredient.name,error);}}}// Sync recipes\nfor(const[itemId,recipe]of Object.entries(this.recipes)){try{await this.updateRecipe(itemId,recipe);console.log('Đã sync recipe cho item:',itemId);}catch(error){console.error('Lỗi khi sync recipe cho item:',itemId,error);}}console.log('Hoàn thành sync dữ liệu lên MockAPI');}catch(error){console.error('Lỗi khi sync dữ liệu lên MockAPI:',error);}}// Lấy dữ liệu bán hàng theo ngày\ngetSalesByDate(date){return this.sales[date]||{};}// Cập nhật dữ liệu bán hàng\nupdateSales(date,salesData){this.sales[date]=salesData;this.saveToLocalStorage();}// Đọc dữ liệu từ API\nasync loadDataFromAPI(){try{const baseURL='http://localhost:3001/api';// Load menu items\nconst menuResponse=await fetch(\"\".concat(baseURL,\"/menuItems\"));if(menuResponse.ok){this.menuItems=await menuResponse.json();}// Load ingredients - sử dụng MockAPI nếu được bật\nif(this.useMockAPI){try{this.ingredients=await mockAPIService.getAllIngredients();console.log('Đã load ingredients từ MockAPI');}catch(mockAPIError){console.error('Lỗi khi load ingredients từ MockAPI, fallback to local API:',mockAPIError);const ingredientsResponse=await fetch(\"\".concat(baseURL,\"/ingredients\"));if(ingredientsResponse.ok){this.ingredients=await ingredientsResponse.json();}}}else{const ingredientsResponse=await fetch(\"\".concat(baseURL,\"/ingredients\"));if(ingredientsResponse.ok){this.ingredients=await ingredientsResponse.json();}}// Load recipes - sử dụng MockAPI nếu được bật\nif(this.useMockAPI){try{const mockAPIRecipes=await mockAPIService.getAllRecipes();this.recipes=mockAPIService.convertFromMockAPIFormat(mockAPIRecipes);console.log('Đã load recipes từ MockAPI');}catch(mockAPIError){console.error('Lỗi khi load recipes từ MockAPI, fallback to local API:',mockAPIError);const recipesResponse=await fetch(\"\".concat(baseURL,\"/recipes\"));if(recipesResponse.ok){this.recipes=await recipesResponse.json();}}}else{const recipesResponse=await fetch(\"\".concat(baseURL,\"/recipes\"));if(recipesResponse.ok){this.recipes=await recipesResponse.json();}}// Load sales từ localStorage\nthis.loadSalesFromLocalStorage();}catch(error){console.error('Lỗi khi load dữ liệu từ API:',error);// Fallback to file loading\nawait this.loadDataFromFiles();}}// Đọc dữ liệu từ file JSON (fallback)\nasync loadDataFromFiles(){try{// Load menu items\nconst menuResponse=await fetch('/data/menuItems.json');if(menuResponse.ok){this.menuItems=await menuResponse.json();}// Load ingredients\nconst ingredientsResponse=await fetch('/data/ingredients.json');if(ingredientsResponse.ok){this.ingredients=await ingredientsResponse.json();}// Load recipes\nconst recipesResponse=await fetch('/data/recipes.json');if(recipesResponse.ok){this.recipes=await recipesResponse.json();}// Load sales từ localStorage\nthis.loadSalesFromLocalStorage();}catch(error){console.error('Lỗi khi load dữ liệu từ file:',error);}}// Lưu menu items vào API\nasync saveMenuItemsToAPI(){try{const response=await fetch('http://localhost:3001/api/menuItems',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(this.menuItems)});if(response.ok){console.log('Đã lưu menuItems vào file JSON');// Lưu vào localStorage như backup\nlocalStorage.setItem('ingredientsTool_menuItems',JSON.stringify(this.menuItems));}else{throw new Error('Không thể lưu menuItems');}}catch(error){console.error('Lỗi khi lưu menuItems:',error);// Fallback to localStorage\nlocalStorage.setItem('ingredientsTool_menuItems',JSON.stringify(this.menuItems));}}// Lưu ingredients vào API\nasync saveIngredientsToAPI(){try{const response=await fetch('http://localhost:3001/api/ingredients',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(this.ingredients)});if(response.ok){console.log('Đã lưu ingredients vào file JSON');localStorage.setItem('ingredientsTool_ingredients',JSON.stringify(this.ingredients));}else{throw new Error('Không thể lưu ingredients');}}catch(error){console.error('Lỗi khi lưu ingredients:',error);localStorage.setItem('ingredientsTool_ingredients',JSON.stringify(this.ingredients));}}// Lưu recipes vào API\nasync saveRecipesToAPI(){try{const response=await fetch('http://localhost:3001/api/recipes',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(this.recipes)});if(response.ok){console.log('Đã lưu recipes vào file JSON');localStorage.setItem('ingredientsTool_recipes',JSON.stringify(this.recipes));}else{throw new Error('Không thể lưu recipes');}}catch(error){console.error('Lỗi khi lưu recipes:',error);localStorage.setItem('ingredientsTool_recipes',JSON.stringify(this.recipes));}}// Lưu sales vào localStorage\nsaveSalesToLocalStorage(){try{localStorage.setItem('ingredientsTool_sales',JSON.stringify(this.sales));}catch(error){console.error('Lỗi khi lưu dữ liệu sales:',error);}}// Load sales từ localStorage\nloadSalesFromLocalStorage(){try{const savedSales=localStorage.getItem('ingredientsTool_sales');if(savedSales){this.sales=JSON.parse(savedSales);}}catch(error){console.error('Lỗi khi load dữ liệu sales:',error);}}// Lưu vào localStorage (backup)\nsaveToLocalStorage(){try{localStorage.setItem('ingredientsTool_menuItems',JSON.stringify(this.menuItems));localStorage.setItem('ingredientsTool_ingredients',JSON.stringify(this.ingredients));localStorage.setItem('ingredientsTool_recipes',JSON.stringify(this.recipes));this.saveSalesToLocalStorage();}catch(error){console.error('Lỗi khi lưu vào localStorage:',error);}}// Load từ localStorage (backup)\nloadFromLocalStorage(){try{const savedMenuItems=localStorage.getItem('ingredientsTool_menuItems');const savedIngredients=localStorage.getItem('ingredientsTool_ingredients');const savedRecipes=localStorage.getItem('ingredientsTool_recipes');if(savedMenuItems){this.menuItems=JSON.parse(savedMenuItems);}if(savedIngredients){this.ingredients=JSON.parse(savedIngredients);}if(savedRecipes){this.recipes=JSON.parse(savedRecipes);}this.loadSalesFromLocalStorage();}catch(error){console.error('Lỗi khi load dữ liệu từ localStorage:',error);}}// Khởi tạo service\nasync init(){if(this.isInitialized){return;// Đã khởi tạo rồi\n}if(this.useMockAPI){// Thử load từ API trước, nếu không được thì load từ file JSON, cuối cùng là localStorage\ntry{await this.loadDataFromAPI();console.log('DataService initialized with MockAPI');}catch(error){console.log('Không thể load từ API, thử load từ file JSON:',error);try{await this.loadDataFromFiles();console.log('DataService initialized with local files');}catch(fileError){console.log('Không thể load từ file JSON, sử dụng localStorage:',fileError);this.loadFromLocalStorage();console.log('DataService initialized with localStorage');}}}else{// Chỉ sử dụng localStorage khi MockAPI bị tắt\nconsole.log('MockAPI bị tắt, sử dụng localStorage');this.loadFromLocalStorage();console.log('DataService initialized with localStorage');}this.isInitialized=true;}}// Tạo instance duy nhất\nconst dataService=new DataService();export default dataService;","map":{"version":3,"names":["mockAPIService","DataService","constructor","menuItems","ingredients","recipes","sales","useMockAPI","isInitialized","getMenuItems","getIngredients","getRecipe","itemId","getAllRecipes","updateRecipe","recipe","menuItem","find","item","id","mockAPIRecipe","convertToMockAPIFormat","getRecipeById","error","createRecipe","console","log","saveRecipesToAPI","addMenuItem","newId","Math","max","map","i","newItem","_objectSpread","push","saveMenuItemsToAPI","updateMenuItem","updates","index","findIndex","deleteMenuItem","filter","addIngredient","ingredient","newIngredient","createIngredient","saveIngredientsToAPI","updateIngredient","ingredientId","ing","deleteIngredient","length","ingredientToDelete","updatedRecipes","Object","keys","forEach","updatePromises","Promise","all","message","includes","addRecipe","deleteRecipe","toggleMockAPIMode","isMockAPIEnabled","syncToMockAPI","name","entries","getSalesByDate","date","updateSales","salesData","saveToLocalStorage","loadDataFromAPI","baseURL","menuResponse","fetch","concat","ok","json","getAllIngredients","mockAPIError","ingredientsResponse","mockAPIRecipes","convertFromMockAPIFormat","recipesResponse","loadSalesFromLocalStorage","loadDataFromFiles","response","method","headers","body","JSON","stringify","localStorage","setItem","Error","saveSalesToLocalStorage","savedSales","getItem","parse","loadFromLocalStorage","savedMenuItems","savedIngredients","savedRecipes","init","fileError","dataService"],"sources":["D:/Ingredients Tool/tool/src/services/dataService.js"],"sourcesContent":["import mockAPIService from './mockAPIService';\r\n\r\n// Service để quản lý dữ liệu - Đọc/ghi từ file JSON và MockAPI\r\nclass DataService {\r\n  constructor() {\r\n    // Dữ liệu sẽ được load từ file JSON và MockAPI\r\n    this.menuItems = [];\r\n    this.ingredients = [];\r\n    this.recipes = {};\r\n    this.sales = {};\r\n    this.useMockAPI = true; // Flag để bật/tắt MockAPI\r\n    this.isInitialized = false; // Flag để kiểm tra đã khởi tạo chưa\r\n  }\r\n\r\n  // Lấy danh sách món\r\n  getMenuItems() {\r\n    return this.menuItems;\r\n  }\r\n\r\n  // Lấy danh sách nguyên liệu\r\n  getIngredients() {\r\n    return this.ingredients;\r\n  }\r\n\r\n  // Lấy công thức cho món\r\n  getRecipe(itemId) {\r\n    return this.recipes[itemId] || {};\r\n  }\r\n\r\n  // Lấy tất cả công thức\r\n  getAllRecipes() {\r\n    return this.recipes;\r\n  }\r\n\r\n  // Cập nhật công thức\r\n  async updateRecipe(itemId, recipe) {\r\n    this.recipes[itemId] = recipe;\r\n    \r\n    if (this.useMockAPI) {\r\n      try {\r\n        const menuItem = this.menuItems.find(item => item.id === itemId);\r\n        const mockAPIRecipe = mockAPIService.convertToMockAPIFormat(itemId, recipe, menuItem, this.ingredients);\r\n        \r\n        // Kiểm tra xem recipe đã tồn tại trong MockAPI chưa\r\n        try {\r\n          await mockAPIService.getRecipeById(itemId);\r\n          // Recipe đã tồn tại, cập nhật\r\n          await mockAPIService.updateRecipe(itemId, mockAPIRecipe);\r\n        } catch (error) {\r\n          // Recipe chưa tồn tại, tạo mới\r\n          await mockAPIService.createRecipe(mockAPIRecipe);\r\n        }\r\n        \r\n        console.log('Đã cập nhật recipe trong MockAPI');\r\n      } catch (error) {\r\n        console.error('Lỗi khi cập nhật recipe trong MockAPI:', error);\r\n        // Fallback to local storage\r\n        await this.saveRecipesToAPI();\r\n      }\r\n    } else {\r\n      await this.saveRecipesToAPI();\r\n    }\r\n  }\r\n\r\n  // Thêm món mới\r\n  async addMenuItem(item) {\r\n    const newId = Math.max(...this.menuItems.map(i => i.id), 0) + 1;\r\n    const newItem = { ...item, id: newId };\r\n    this.menuItems.push(newItem);\r\n    await this.saveMenuItemsToAPI();\r\n    return newItem;\r\n  }\r\n\r\n  // Cập nhật món\r\n  async updateMenuItem(itemId, updates) {\r\n    const index = this.menuItems.findIndex(item => item.id === itemId);\r\n    if (index !== -1) {\r\n      this.menuItems[index] = { ...this.menuItems[index], ...updates };\r\n      await this.saveMenuItemsToAPI();\r\n    }\r\n  }\r\n\r\n  // Xóa món\r\n  async deleteMenuItem(itemId) {\r\n    this.menuItems = this.menuItems.filter(item => item.id !== itemId);\r\n    delete this.recipes[itemId];\r\n    await this.saveMenuItemsToAPI();\r\n    await this.saveRecipesToAPI();\r\n  }\r\n\r\n  // Thêm nguyên liệu mới\r\n  async addIngredient(ingredient) {\r\n    if (this.useMockAPI) {\r\n      try {\r\n        const newIngredient = await mockAPIService.createIngredient(ingredient);\r\n        this.ingredients.push(newIngredient);\r\n        console.log('Đã tạo ingredient mới trong MockAPI');\r\n        return newIngredient;\r\n      } catch (error) {\r\n        console.error('Lỗi khi tạo ingredient trong MockAPI:', error);\r\n        // Fallback to local\r\n        const newId = Math.max(...this.ingredients.map(i => i.id), 0) + 1;\r\n        const newIngredient = { ...ingredient, id: newId };\r\n        this.ingredients.push(newIngredient);\r\n        await this.saveIngredientsToAPI();\r\n        return newIngredient;\r\n      }\r\n    } else {\r\n      const newId = Math.max(...this.ingredients.map(i => i.id), 0) + 1;\r\n      const newIngredient = { ...ingredient, id: newId };\r\n      this.ingredients.push(newIngredient);\r\n      await this.saveIngredientsToAPI();\r\n      return newIngredient;\r\n    }\r\n  }\r\n\r\n  // Cập nhật nguyên liệu\r\n  async updateIngredient(ingredientId, updates) {\r\n    const index = this.ingredients.findIndex(ing => ing.id === ingredientId);\r\n    if (index !== -1) {\r\n      this.ingredients[index] = { ...this.ingredients[index], ...updates };\r\n      \r\n      if (this.useMockAPI) {\r\n        try {\r\n          await mockAPIService.updateIngredient(ingredientId, this.ingredients[index]);\r\n          console.log('Đã cập nhật ingredient trong MockAPI');\r\n        } catch (error) {\r\n          console.error('Lỗi khi cập nhật ingredient trong MockAPI:', error);\r\n          await this.saveIngredientsToAPI();\r\n        }\r\n      } else {\r\n        await this.saveIngredientsToAPI();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Xóa nguyên liệu\r\n  async deleteIngredient(ingredientId) {\r\n    console.log('Attempting to delete ingredient with ID:', ingredientId);\r\n    console.log('Current ingredients before delete:', this.ingredients.length);\r\n    \r\n    // Tìm ingredient trước khi xóa để debug\r\n    const ingredientToDelete = this.ingredients.find(ing => ing.id === ingredientId);\r\n    if (ingredientToDelete) {\r\n      console.log('Found ingredient to delete:', ingredientToDelete);\r\n    } else {\r\n      console.log('Ingredient not found in local data, ID:', ingredientId);\r\n    }\r\n    \r\n    // Xóa nguyên liệu khỏi local data\r\n    this.ingredients = this.ingredients.filter(ing => ing.id !== ingredientId);\r\n    console.log('Ingredients after local delete:', this.ingredients.length);\r\n    \r\n    // Xóa nguyên liệu khỏi tất cả công thức\r\n    const updatedRecipes = {};\r\n    Object.keys(this.recipes).forEach(itemId => {\r\n      const recipe = { ...this.recipes[itemId] };\r\n      delete recipe[ingredientId];\r\n      updatedRecipes[itemId] = recipe;\r\n    });\r\n    this.recipes = updatedRecipes;\r\n    \r\n    if (this.useMockAPI) {\r\n      try {\r\n        // Xóa ingredient trong MockAPI\r\n        console.log('Deleting ingredient from MockAPI with ID:', ingredientId);\r\n        await mockAPIService.deleteIngredient(ingredientId);\r\n        console.log('Đã xóa ingredient trong MockAPI');\r\n        \r\n        // Cập nhật tất cả recipes trong MockAPI\r\n        const updatePromises = Object.keys(this.recipes).map(itemId => \r\n          this.updateRecipe(itemId, this.recipes[itemId])\r\n        );\r\n        await Promise.all(updatePromises);\r\n        console.log('Đã cập nhật tất cả recipes sau khi xóa ingredient');\r\n        \r\n      } catch (error) {\r\n        console.error('Lỗi khi xóa ingredient trong MockAPI:', error);\r\n        \r\n        // Nếu là lỗi 404 (ingredient không tồn tại trong MockAPI), chỉ cần sync local data\r\n        if (error.message.includes('404')) {\r\n          console.log('Ingredient không tồn tại trong MockAPI, chỉ cần sync local data');\r\n          await this.saveIngredientsToAPI();\r\n          await this.saveRecipesToAPI();\r\n        } else {\r\n          // Lỗi khác, fallback to local storage\r\n          await this.saveIngredientsToAPI();\r\n          await this.saveRecipesToAPI();\r\n        }\r\n      }\r\n    } else {\r\n      await this.saveIngredientsToAPI();\r\n      await this.saveRecipesToAPI();\r\n    }\r\n  }\r\n\r\n  // Thêm recipe mới (tương thích với MockAPI)\r\n  async addRecipe(itemId, recipe) {\r\n    this.recipes[itemId] = recipe;\r\n    \r\n    if (this.useMockAPI) {\r\n      try {\r\n        const menuItem = this.menuItems.find(item => item.id === itemId);\r\n        const mockAPIRecipe = mockAPIService.convertToMockAPIFormat(itemId, recipe, menuItem, this.ingredients);\r\n        await mockAPIService.createRecipe(mockAPIRecipe);\r\n        console.log('Đã tạo recipe mới trong MockAPI');\r\n      } catch (error) {\r\n        console.error('Lỗi khi tạo recipe trong MockAPI:', error);\r\n        await this.saveRecipesToAPI();\r\n      }\r\n    } else {\r\n      await this.saveRecipesToAPI();\r\n    }\r\n  }\r\n\r\n  // Xóa recipe (tương thích với MockAPI)\r\n  async deleteRecipe(itemId) {\r\n    delete this.recipes[itemId];\r\n    \r\n    if (this.useMockAPI) {\r\n      try {\r\n        await mockAPIService.deleteRecipe(itemId);\r\n        console.log('Đã xóa recipe trong MockAPI');\r\n      } catch (error) {\r\n        console.error('Lỗi khi xóa recipe trong MockAPI:', error);\r\n        await this.saveRecipesToAPI();\r\n      }\r\n    } else {\r\n      await this.saveRecipesToAPI();\r\n    }\r\n  }\r\n\r\n  // Toggle MockAPI mode\r\n  toggleMockAPIMode() {\r\n    this.useMockAPI = !this.useMockAPI;\r\n    console.log('MockAPI mode:', this.useMockAPI ? 'ON' : 'OFF');\r\n    return this.useMockAPI;\r\n  }\r\n\r\n  // Lấy trạng thái MockAPI\r\n  isMockAPIEnabled() {\r\n    return this.useMockAPI;\r\n  }\r\n\r\n  // Sync dữ liệu từ local lên MockAPI\r\n  async syncToMockAPI() {\r\n    if (!this.useMockAPI) {\r\n      console.log('MockAPI không được bật, không thể sync');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Bắt đầu sync dữ liệu lên MockAPI...');\r\n      \r\n      // Sync ingredients\r\n      for (const ingredient of this.ingredients) {\r\n        try {\r\n          await mockAPIService.createIngredient(ingredient);\r\n          console.log('Đã sync ingredient:', ingredient.name);\r\n        } catch (error) {\r\n          if (error.message.includes('409')) {\r\n            // Ingredient đã tồn tại, bỏ qua\r\n            console.log('Ingredient đã tồn tại:', ingredient.name);\r\n          } else {\r\n            console.error('Lỗi khi sync ingredient:', ingredient.name, error);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Sync recipes\r\n      for (const [itemId, recipe] of Object.entries(this.recipes)) {\r\n        try {\r\n          await this.updateRecipe(itemId, recipe);\r\n          console.log('Đã sync recipe cho item:', itemId);\r\n        } catch (error) {\r\n          console.error('Lỗi khi sync recipe cho item:', itemId, error);\r\n        }\r\n      }\r\n      \r\n      console.log('Hoàn thành sync dữ liệu lên MockAPI');\r\n    } catch (error) {\r\n      console.error('Lỗi khi sync dữ liệu lên MockAPI:', error);\r\n    }\r\n  }\r\n\r\n  // Lấy dữ liệu bán hàng theo ngày\r\n  getSalesByDate(date) {\r\n    return this.sales[date] || {};\r\n  }\r\n\r\n  // Cập nhật dữ liệu bán hàng\r\n  updateSales(date, salesData) {\r\n    this.sales[date] = salesData;\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // Đọc dữ liệu từ API\r\n  async loadDataFromAPI() {\r\n    try {\r\n      const baseURL = 'http://localhost:3001/api';\r\n      \r\n      // Load menu items\r\n      const menuResponse = await fetch(`${baseURL}/menuItems`);\r\n      if (menuResponse.ok) {\r\n        this.menuItems = await menuResponse.json();\r\n      }\r\n\r\n      // Load ingredients - sử dụng MockAPI nếu được bật\r\n      if (this.useMockAPI) {\r\n        try {\r\n          this.ingredients = await mockAPIService.getAllIngredients();\r\n          console.log('Đã load ingredients từ MockAPI');\r\n        } catch (mockAPIError) {\r\n          console.error('Lỗi khi load ingredients từ MockAPI, fallback to local API:', mockAPIError);\r\n          const ingredientsResponse = await fetch(`${baseURL}/ingredients`);\r\n          if (ingredientsResponse.ok) {\r\n            this.ingredients = await ingredientsResponse.json();\r\n          }\r\n        }\r\n      } else {\r\n        const ingredientsResponse = await fetch(`${baseURL}/ingredients`);\r\n        if (ingredientsResponse.ok) {\r\n          this.ingredients = await ingredientsResponse.json();\r\n        }\r\n      }\r\n\r\n      // Load recipes - sử dụng MockAPI nếu được bật\r\n      if (this.useMockAPI) {\r\n        try {\r\n          const mockAPIRecipes = await mockAPIService.getAllRecipes();\r\n          this.recipes = mockAPIService.convertFromMockAPIFormat(mockAPIRecipes);\r\n          console.log('Đã load recipes từ MockAPI');\r\n        } catch (mockAPIError) {\r\n          console.error('Lỗi khi load recipes từ MockAPI, fallback to local API:', mockAPIError);\r\n          const recipesResponse = await fetch(`${baseURL}/recipes`);\r\n          if (recipesResponse.ok) {\r\n            this.recipes = await recipesResponse.json();\r\n          }\r\n        }\r\n      } else {\r\n        const recipesResponse = await fetch(`${baseURL}/recipes`);\r\n        if (recipesResponse.ok) {\r\n          this.recipes = await recipesResponse.json();\r\n        }\r\n      }\r\n\r\n      // Load sales từ localStorage\r\n      this.loadSalesFromLocalStorage();\r\n    } catch (error) {\r\n      console.error('Lỗi khi load dữ liệu từ API:', error);\r\n      // Fallback to file loading\r\n      await this.loadDataFromFiles();\r\n    }\r\n  }\r\n\r\n  // Đọc dữ liệu từ file JSON (fallback)\r\n  async loadDataFromFiles() {\r\n    try {\r\n      // Load menu items\r\n      const menuResponse = await fetch('/data/menuItems.json');\r\n      if (menuResponse.ok) {\r\n        this.menuItems = await menuResponse.json();\r\n      }\r\n\r\n      // Load ingredients\r\n      const ingredientsResponse = await fetch('/data/ingredients.json');\r\n      if (ingredientsResponse.ok) {\r\n        this.ingredients = await ingredientsResponse.json();\r\n      }\r\n\r\n      // Load recipes\r\n      const recipesResponse = await fetch('/data/recipes.json');\r\n      if (recipesResponse.ok) {\r\n        this.recipes = await recipesResponse.json();\r\n      }\r\n\r\n      // Load sales từ localStorage\r\n      this.loadSalesFromLocalStorage();\r\n    } catch (error) {\r\n      console.error('Lỗi khi load dữ liệu từ file:', error);\r\n    }\r\n  }\r\n\r\n  // Lưu menu items vào API\r\n  async saveMenuItemsToAPI() {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/menuItems', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(this.menuItems)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('Đã lưu menuItems vào file JSON');\r\n        // Lưu vào localStorage như backup\r\n        localStorage.setItem('ingredientsTool_menuItems', JSON.stringify(this.menuItems));\r\n      } else {\r\n        throw new Error('Không thể lưu menuItems');\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi lưu menuItems:', error);\r\n      // Fallback to localStorage\r\n      localStorage.setItem('ingredientsTool_menuItems', JSON.stringify(this.menuItems));\r\n    }\r\n  }\r\n\r\n  // Lưu ingredients vào API\r\n  async saveIngredientsToAPI() {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/ingredients', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(this.ingredients)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('Đã lưu ingredients vào file JSON');\r\n        localStorage.setItem('ingredientsTool_ingredients', JSON.stringify(this.ingredients));\r\n      } else {\r\n        throw new Error('Không thể lưu ingredients');\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi lưu ingredients:', error);\r\n      localStorage.setItem('ingredientsTool_ingredients', JSON.stringify(this.ingredients));\r\n    }\r\n  }\r\n\r\n  // Lưu recipes vào API\r\n  async saveRecipesToAPI() {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/recipes', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(this.recipes)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('Đã lưu recipes vào file JSON');\r\n        localStorage.setItem('ingredientsTool_recipes', JSON.stringify(this.recipes));\r\n      } else {\r\n        throw new Error('Không thể lưu recipes');\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi lưu recipes:', error);\r\n      localStorage.setItem('ingredientsTool_recipes', JSON.stringify(this.recipes));\r\n    }\r\n  }\r\n\r\n  // Lưu sales vào localStorage\r\n  saveSalesToLocalStorage() {\r\n    try {\r\n      localStorage.setItem('ingredientsTool_sales', JSON.stringify(this.sales));\r\n    } catch (error) {\r\n      console.error('Lỗi khi lưu dữ liệu sales:', error);\r\n    }\r\n  }\r\n\r\n  // Load sales từ localStorage\r\n  loadSalesFromLocalStorage() {\r\n    try {\r\n      const savedSales = localStorage.getItem('ingredientsTool_sales');\r\n      if (savedSales) {\r\n        this.sales = JSON.parse(savedSales);\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi load dữ liệu sales:', error);\r\n    }\r\n  }\r\n\r\n  // Lưu vào localStorage (backup)\r\n  saveToLocalStorage() {\r\n    try {\r\n      localStorage.setItem('ingredientsTool_menuItems', JSON.stringify(this.menuItems));\r\n      localStorage.setItem('ingredientsTool_ingredients', JSON.stringify(this.ingredients));\r\n      localStorage.setItem('ingredientsTool_recipes', JSON.stringify(this.recipes));\r\n      this.saveSalesToLocalStorage();\r\n    } catch (error) {\r\n      console.error('Lỗi khi lưu vào localStorage:', error);\r\n    }\r\n  }\r\n\r\n  // Load từ localStorage (backup)\r\n  loadFromLocalStorage() {\r\n    try {\r\n      const savedMenuItems = localStorage.getItem('ingredientsTool_menuItems');\r\n      const savedIngredients = localStorage.getItem('ingredientsTool_ingredients');\r\n      const savedRecipes = localStorage.getItem('ingredientsTool_recipes');\r\n      \r\n      if (savedMenuItems) {\r\n        this.menuItems = JSON.parse(savedMenuItems);\r\n      }\r\n      \r\n      if (savedIngredients) {\r\n        this.ingredients = JSON.parse(savedIngredients);\r\n      }\r\n      \r\n      if (savedRecipes) {\r\n        this.recipes = JSON.parse(savedRecipes);\r\n      }\r\n      \r\n      this.loadSalesFromLocalStorage();\r\n    } catch (error) {\r\n      console.error('Lỗi khi load dữ liệu từ localStorage:', error);\r\n    }\r\n  }\r\n\r\n  // Khởi tạo service\r\n  async init() {\r\n    if (this.isInitialized) {\r\n      return; // Đã khởi tạo rồi\r\n    }\r\n    \r\n    if (this.useMockAPI) {\r\n      // Thử load từ API trước, nếu không được thì load từ file JSON, cuối cùng là localStorage\r\n      try {\r\n        await this.loadDataFromAPI();\r\n        console.log('DataService initialized with MockAPI');\r\n      } catch (error) {\r\n        console.log('Không thể load từ API, thử load từ file JSON:', error);\r\n        try {\r\n          await this.loadDataFromFiles();\r\n          console.log('DataService initialized with local files');\r\n        } catch (fileError) {\r\n          console.log('Không thể load từ file JSON, sử dụng localStorage:', fileError);\r\n          this.loadFromLocalStorage();\r\n          console.log('DataService initialized with localStorage');\r\n        }\r\n      }\r\n    } else {\r\n      // Chỉ sử dụng localStorage khi MockAPI bị tắt\r\n      console.log('MockAPI bị tắt, sử dụng localStorage');\r\n      this.loadFromLocalStorage();\r\n      console.log('DataService initialized with localStorage');\r\n    }\r\n    \r\n    this.isInitialized = true;\r\n  }\r\n}\r\n\r\n// Tạo instance duy nhất\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}