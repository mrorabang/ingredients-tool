{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import dataService from'../services/dataService';import{jsx as _jsx}from\"react/jsx-runtime\";const DataContext=/*#__PURE__*/createContext();export const useData=()=>{const context=useContext(DataContext);if(!context){throw new Error('useData must be used within a DataProvider');}return context;};export const DataProvider=_ref=>{let{children}=_ref;const[menuItems,setMenuItems]=useState([]);const[ingredients,setIngredients]=useState([]);const[recipes,setRecipes]=useState({});const[isLoading,setIsLoading]=useState(false);// Load data on mount\nuseEffect(()=>{const loadData=async()=>{try{if(!dataService.isInitialized){await dataService.init();}setMenuItems(dataService.getMenuItems());setIngredients(dataService.getIngredients());setRecipes(dataService.getAllRecipes());}catch(error){console.error('Error loading data:',error);}};loadData();},[]);// Refresh all data\nconst refreshData=async()=>{setIsLoading(true);try{setMenuItems(dataService.getMenuItems());setIngredients(dataService.getIngredients());setRecipes(dataService.getAllRecipes());}catch(error){console.error('Error refreshing data:',error);}finally{setIsLoading(false);}};// Update specific data\nconst updateMenuItems=()=>{setMenuItems(dataService.getMenuItems());};const updateIngredients=()=>{setIngredients(dataService.getIngredients());};const updateRecipes=()=>{setRecipes(dataService.getAllRecipes());};// Update all data after CRUD operations\nconst updateAllData=()=>{setMenuItems(dataService.getMenuItems());setIngredients(dataService.getIngredients());setRecipes(dataService.getAllRecipes());};const value={menuItems,ingredients,recipes,isLoading,refreshData,updateMenuItems,updateIngredients,updateRecipes,updateAllData};return/*#__PURE__*/_jsx(DataContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","dataService","jsx","_jsx","DataContext","useData","context","Error","DataProvider","_ref","children","menuItems","setMenuItems","ingredients","setIngredients","recipes","setRecipes","isLoading","setIsLoading","loadData","isInitialized","init","getMenuItems","getIngredients","getAllRecipes","error","console","refreshData","updateMenuItems","updateIngredients","updateRecipes","updateAllData","value","Provider"],"sources":["D:/Ingredients Tool/tool/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport dataService from '../services/dataService';\r\n\r\nconst DataContext = createContext();\r\n\r\nexport const useData = () => {\r\n  const context = useContext(DataContext);\r\n  if (!context) {\r\n    throw new Error('useData must be used within a DataProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [menuItems, setMenuItems] = useState([]);\r\n  const [ingredients, setIngredients] = useState([]);\r\n  const [recipes, setRecipes] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Load data on mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        if (!dataService.isInitialized) {\r\n          await dataService.init();\r\n        }\r\n        setMenuItems(dataService.getMenuItems());\r\n        setIngredients(dataService.getIngredients());\r\n        setRecipes(dataService.getAllRecipes());\r\n      } catch (error) {\r\n        console.error('Error loading data:', error);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, []);\r\n\r\n  // Refresh all data\r\n  const refreshData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      setMenuItems(dataService.getMenuItems());\r\n      setIngredients(dataService.getIngredients());\r\n      setRecipes(dataService.getAllRecipes());\r\n    } catch (error) {\r\n      console.error('Error refreshing data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update specific data\r\n  const updateMenuItems = () => {\r\n    setMenuItems(dataService.getMenuItems());\r\n  };\r\n\r\n  const updateIngredients = () => {\r\n    setIngredients(dataService.getIngredients());\r\n  };\r\n\r\n  const updateRecipes = () => {\r\n    setRecipes(dataService.getAllRecipes());\r\n  };\r\n\r\n  // Update all data after CRUD operations\r\n  const updateAllData = () => {\r\n    setMenuItems(dataService.getMenuItems());\r\n    setIngredients(dataService.getIngredients());\r\n    setRecipes(dataService.getAllRecipes());\r\n  };\r\n\r\n  const value = {\r\n    menuItems,\r\n    ingredients,\r\n    recipes,\r\n    isLoading,\r\n    refreshData,\r\n    updateMenuItems,\r\n    updateIngredients,\r\n    updateRecipes,\r\n    updateAllData\r\n  };\r\n\r\n  return (\r\n    <DataContext.Provider value={value}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}